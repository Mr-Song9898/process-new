[{"C:\\Users\\Admin\\Desktop\\process-new\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\process-new\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\process-new\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\index.js":"4","C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\content.js":"5","C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\util.js":"6","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\index.js":"7","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Test.js":"8","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\index.js":"9","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\edit\\index.js":"10","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\index.js":"11","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\contextMenu.js":"12","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\data.js":"13","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\process\\index.jsx":"14","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\index.jsx":"15","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerX\\index.jsx":"16","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\data.js":"17","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerX\\config.js":"18","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\register.js":"19","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\config.js":"20","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\component\\dragComponent.jsx":"21","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\index.js":"22","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\canvasMenu.js":"23","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\nodeMenu.js":"24","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\edgTooltip.js":"25","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\nodeTooltip.js":"26","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\process\\config.js":"27","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\edit\\data.js":"28"},{"size":302,"mtime":1639751911081,"results":"29","hashOfConfig":"30"},{"size":234,"mtime":1639751911062,"results":"31","hashOfConfig":"30"},{"size":375,"mtime":1639751911082,"results":"32","hashOfConfig":"30"},{"size":2189,"mtime":1639751911080,"results":"33","hashOfConfig":"30"},{"size":550,"mtime":1639751911079,"results":"34","hashOfConfig":"30"},{"size":403,"mtime":1639751911080,"results":"35","hashOfConfig":"30"},{"size":371,"mtime":1639751911067,"results":"36","hashOfConfig":"30"},{"size":142,"mtime":1639751911064,"results":"37","hashOfConfig":"30"},{"size":12627,"mtime":1639751911063,"results":"38","hashOfConfig":"30"},{"size":6482,"mtime":1639751911067,"results":"39","hashOfConfig":"30"},{"size":30843,"mtime":1639751911066,"results":"40","hashOfConfig":"30"},{"size":1538,"mtime":1639751911063,"results":"41","hashOfConfig":"30"},{"size":610,"mtime":1639751911063,"results":"42","hashOfConfig":"30"},{"size":19384,"mtime":1639751911068,"results":"43","hashOfConfig":"30"},{"size":11709,"mtime":1639751911072,"results":"44","hashOfConfig":"30"},{"size":10242,"mtime":1639751911078,"results":"45","hashOfConfig":"30"},{"size":3701,"mtime":1639751911065,"results":"46","hashOfConfig":"30"},{"size":5689,"mtime":1639751911077,"results":"47","hashOfConfig":"30"},{"size":8260,"mtime":1639751911072,"results":"48","hashOfConfig":"30"},{"size":3604,"mtime":1639751911072,"results":"49","hashOfConfig":"30"},{"size":3755,"mtime":1639751911065,"results":"50","hashOfConfig":"30"},{"size":221,"mtime":1639751911071,"results":"51","hashOfConfig":"30"},{"size":1809,"mtime":1639751911069,"results":"52","hashOfConfig":"30"},{"size":697,"mtime":1639751911071,"results":"53","hashOfConfig":"30"},{"size":1190,"mtime":1639751911070,"results":"54","hashOfConfig":"30"},{"size":1116,"mtime":1639751911071,"results":"55","hashOfConfig":"30"},{"size":2851,"mtime":1639751911068,"results":"56","hashOfConfig":"30"},{"size":3816,"mtime":1639751911066,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p32izv",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\process-new\\src\\index.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\index.js",["123","124"],"import React, { Component, Fragment } from 'react';\r\nimport { Select, Col, Row, Space, Button, Card } from 'antd';\r\nimport { DemoList } from './content';\r\n// import './style.css';\r\nimport { disPlayCurrentDome } from './util';\r\n\r\nconst { Option } = Select;\r\nexport default class Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentDome: 'process',\r\n            title: 'this is the title!',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    onchange = (currentDome) => {\r\n        const title = DemoList.find(item => item.id === currentDome).label;\r\n        this.setState({\r\n            currentDome,\r\n            title,\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const { currentDome, title } = this.state;\r\n        return (\r\n            <Fragment>\r\n                <div className='body'>\r\n                    <h2>{title}</h2>\r\n                    <Row>\r\n                        <Col>\r\n                            <Space size={10}>\r\n                                <Select\r\n                                    placeholder=\"请选择模板\"\r\n                                    value={currentDome}\r\n                                    style={{ width: 200}}\r\n                                    onChange={this.onchange}\r\n                                >\r\n                                    {\r\n                                        DemoList.map(item => <Option value={item.id} key={item.id}>{item.label}</Option>)\r\n                                    }\r\n                                </Select>\r\n                                {/* <Button type=\"primary\">Primary</Button>\r\n                                <Button>Default</Button>\r\n                                <Button type=\"dashed\">Dashed</Button>\r\n                                <Button type=\"link\">Link</Button> */}\r\n                            </Space>\r\n                        </Col>\r\n                    </Row>\r\n                    <div>\r\n                        {\r\n                            disPlayCurrentDome(currentDome)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\content.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\home\\util.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\index.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Test.js",["125"],"import react, { Component } from 'react';\r\n\r\nexport default class Test extends Component {\r\n  render() {\r\n    return (<div>test</div>)\r\n  }\r\n}","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\index.js",["126"],"import React, { Component } from 'react';\r\nimport G6 from '@antv/g6';\r\nimport { Select, Button, Space, Layout } from 'antd';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { data, selectData } from './data';\r\n// import { moveFuc } from '../util';\r\nimport NodeContextMenu from './contextMenu';\r\nimport './style.css';\r\n\r\nconst Option = Select.Option;\r\nconst { Header, Footer, Sider, Content } = Layout;\r\nconst innerWidth = window.innerWidth || (document.body && document.body.clientWidth);\r\nconst innerHeight = window.innerHeight || (document.body && document.body.clientHeight);\r\nexport default class Modes extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showNodeContextMenu: false,\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 自定义行为\r\n        this.registerBehavior();\r\n        // 自定义节点\r\n        this.registerNode();\r\n        // 自定义边\r\n        this.registerEdge();\r\n        // 初始化并渲染画布\r\n        this.display();\r\n    }\r\n\r\n    modeChange = (value) => {\r\n      console.log('value==>>', value);\r\n      this.graph.setMode(value);\r\n    }\r\n\r\n    registerEdge = () => {\r\n        \r\n    }\r\n\r\n    registerNode = () => {\r\n        G6.registerNode(\r\n            'rect_custom',\r\n            {\r\n              options: {\r\n                style: {\r\n                    radius: 15,\r\n                    fill: 'lightblue',\r\n                    stroke: '#888',\r\n                    lineWidth: 1,\r\n                    cursor: 'pointer',\r\n                    width: 70,\r\n                    height: 30\r\n                },\r\n                labelCfg: {\r\n                    style: {\r\n                        fill: '#000', // 字体颜色\r\n                        lineWidth: 1, //\r\n                        fontSize: 12,\r\n                        cursor: 'pointer'\r\n                    }\r\n                },\r\n                stateStyles: {\r\n                  hover: {},\r\n                  selected: {},\r\n                },\r\n              },\r\n              /**\r\n               * 绘制节点，包含文本\r\n               * @param  {Object} cfg 节点的配置项\r\n               * @param  {G.Group} group 图形分组，节点中图形对象的容器\r\n               * @return {G.Shape} 返回一个绘制的图形作为 keyShape，通过 node.get('keyShape') 可以获取。\r\n               * 关于 keyShape 可参考文档 核心概念-节点/边/Combo-图形 Shape 与 keyShape\r\n               */\r\n              draw(cfg, group) {},\r\n              /**\r\n               * 绘制后的附加操作，默认没有任何操作\r\n               * @param  {Object} cfg 节点的配置项\r\n               * @param  {G.Group} group 图形分组，节点中图形对象的容器\r\n               */\r\n              afterDraw(cfg, group) {},\r\n              /**\r\n               * 更新节点，包含文本\r\n               * @override\r\n               * @param  {Object} cfg 节点的配置项\r\n               * @param  {Node} node 节点\r\n               */\r\n              update(cfg, node) {},\r\n              /**\r\n               * 更新节点后的操作，一般同 afterDraw 配合使用\r\n               * @override\r\n               * @param  {Object} cfg 节点的配置项\r\n               * @param  {Node} node 节点\r\n               */\r\n              afterUpdate(cfg, node) {},\r\n              /**\r\n               * 响应节点的状态变化。\r\n               * 在需要使用动画来响应状态变化时需要被复写，其他样式的响应参见下文提及的 [配置状态样式] 文档\r\n               * @param  {String} name 状态名称\r\n               * @param  {Object} value 状态值\r\n               * @param  {Node} node 节点\r\n               */\r\n              setState(name, value, node) {},\r\n              /**\r\n               * 获取锚点（相关边的连入点）\r\n               * @param  {Object} cfg 节点的配置项\r\n               * @return {Array|null} 锚点（相关边的连入点）的数组,如果为 null，则没有控制点\r\n               */\r\n              getAnchorPoints(cfg) {\r\n                return [\r\n                    [0, 0.5], // 左侧中间\r\n                    [1, 0.5], // 右侧中间\r\n                ];\r\n              },\r\n            },\r\n            // 继承内置节点类型的名字，例如基类 'single-node'，或 'circle', 'rect' 等\r\n            // 当不指定该参数则代表不继承任何内置节点类型\r\n            'rect',\r\n        );\r\n    }\r\n\r\n    registerBehavior = () => {\r\n        // 封装点击添加节点的交互\r\n        G6.registerBehavior('click-add-node', {\r\n            // 设定该自定义行为需要监听的事件及其响应函数\r\n            getEvents() {\r\n            // 监听的事件为 canvas:click，响应函数是 onClick\r\n                return {\r\n                    'canvas:click': 'onClick',\r\n                };\r\n            },\r\n            // 点击事件\r\n            onClick(ev) {\r\n                console.log('ev==>>', ev);\r\n                const graph = this.graph;\r\n                // 在图上新增一个节点\r\n                graph.addItem('node', {\r\n                    x: ev.canvasX,\r\n                    y: ev.canvasY,\r\n                    id: uuidv4(), // 生成唯一的 id\r\n                    label: 'rect_custom',\r\n                    type: 'rect_custom',\r\n                    // style: {\r\n                    //     // 仅在 keyShape 上生效\r\n                    //     fill: 'lightblue',\r\n                    //     stroke: '#888',\r\n                    //     lineWidth: 1,\r\n                    //     radius: 7,\r\n                    // },\r\n                    // linkPoints: {\r\n                    //     top: true,\r\n                    //     bottom: true,\r\n                    //     left: true,\r\n                    //     right: true,\r\n                    //     // ... 四个圆的样式可以在这里指定\r\n                    // },\r\n                });\r\n            },\r\n        });\r\n        \r\n        // 封装点击添加边的交互\r\n        G6.registerBehavior('click-add-edge', {\r\n            // 设定该自定义行为需要监听的事件及其响应函数\r\n            getEvents() {\r\n            return {\r\n                'node:click': 'onClick', // 监听事件 node:click，响应函数是 onClick\r\n                mousemove: 'onMousemove', // 监听事件 mousemove，响应函数是 onMousemove\r\n                'edge:click': 'onEdgeClick', // 监听事件 edge:click，响应函数是 onEdgeClick\r\n            };\r\n            },\r\n            // getEvents 中定义的 'node:click' 的响应函数\r\n            onClick(ev) {\r\n            const node = ev.item;\r\n            const graph = this.graph;\r\n            console.log('ev==>>', ev);\r\n            // 鼠标当前点击的节点的位置\r\n            const point = { x: ev.x, y: ev.y };\r\n            const model = node.getModel();\r\n            console.log('model==>>', model);\r\n            console.log(' this.edge==>>', this.edge);\r\n            console.log(' this.addingEdge==>>', this.addingEdge);\r\n            if (this.addingEdge && this.edge) {\r\n                console.log('111111');\r\n                graph.updateItem(this.edge, {\r\n                    target: model.id,\r\n                });\r\n        \r\n                this.edge = null;\r\n                this.addingEdge = false;\r\n            } else {\r\n                console.log('22222');\r\n                // 在图上新增一条边，结束点是鼠标当前点击的节点的位置\r\n                this.edge = graph.addItem('edge', {\r\n                    source: model.id,\r\n                    target: point,\r\n                });\r\n                this.addingEdge = true;\r\n            }\r\n            },\r\n            // getEvents 中定义的 mousemove 的响应函数\r\n            onMousemove(ev) {\r\n                // 鼠标的当前位置\r\n                const point = { x: ev.x, y: ev.y };\r\n                if (this.addingEdge && this.edge) {\r\n                    // console.log('333333');\r\n                    // 更新边的结束点位置为当前鼠标位置\r\n                    this.graph.updateItem(this.edge, {\r\n                        target: point,\r\n                    });\r\n                }\r\n            },\r\n            // getEvents 中定义的 'edge:click' 的响应函数\r\n            onEdgeClick(ev) {\r\n                const currentEdge = ev.item;\r\n                console.log('currentEdge==>>', currentEdge, this.edge === currentEdge);\r\n                // 拖拽过程中，点击会点击到新增的边上\r\n                if (this.addingEdge && this.edge === currentEdge) {\r\n                    this.graph.removeItem(this.edge);\r\n                    this.edge = null;\r\n                    this.addingEdge = false;\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    display = () => {\r\n        let objDemo = document.getElementsByClassName('content')[0]\r\n        objDemo.oncontextmenu = (e) => {\r\n            e.preventDefault()\r\n        }\r\n        const graph = new G6.Graph({\r\n            container: 'mountNode',\r\n            width: innerWidth - 240,\r\n            height: innerHeight,\r\n            modes: {\r\n                // 默认交互模式\r\n                default: ['drag-node', 'click-select'],\r\n                // 增加节点交互模式\r\n                addNode: ['click-add-node', 'click-select'],\r\n                // 增加边交互模式\r\n                addEdge: ['click-add-edge', 'click-select'],\r\n              },\r\n              // 节点在不同状态下的样式集合\r\n              nodeStateStyles: {\r\n                // 节点在 selected 状态下的样式，对应内置的 click-select 行为\r\n                selected: {\r\n                  stroke: '#666',\r\n                  lineWidth: 2,\r\n                  fill: 'steelblue'\r\n                },\r\n                hover: {\r\n                    fillOpacity: 0.1,\r\n                    lineWidth: 3,\r\n                },\r\n            }\r\n        });\r\n        this.graph = graph;\r\n        // this.graph.read(initData); // 读取并渲染数据 this.graph.read()\r\n        this.graph.data(data); // 读取数据 this.graph.read()\r\n        this.graph.render(); // 渲染画布\r\n        // 监听鼠标进入节点事件\r\n        this.graph.on('node:mouseenter', (evt) => {\r\n            const node = evt.item;\r\n            // 激活该节点的 hover 状态\r\n            this.graph.setItemState(node, 'hover', true);\r\n        });\r\n        // 监听鼠标离开节点事件\r\n        this.graph.on('node:mouseleave', (evt) => {\r\n            const node = evt.item;\r\n            // 关闭该节点的 hover 状态\r\n            this.graph.setItemState(node, 'hover', false);\r\n        });\r\n        // 监听节点上面右键菜单事件\r\n        this.graph.on('node:contextmenu', evt => {\r\n            const { item } = evt\r\n            const model = item.getModel()\r\n            const { x, y } = model\r\n            const point = graph.getCanvasByPoint(x, y)\r\n            this.setState({\r\n                showNodeContextMenu: true,\r\n                x: point.x,\r\n                y: point.y,\r\n            })\r\n        })\r\n    }\r\n   \r\n    render () {\r\n        const { showNodeContextMenu, x, y } = this.state;\r\n        return (\r\n            <div className='body'>\r\n                <Layout>\r\n                    <Header className={'header'}>\r\n                        <Space align={'start'}>\r\n                            <Select defaultValue={'default'} onChange={this.modeChange} style={{ width: '100px' }}>\r\n                            {\r\n                                selectData.map(item => <Option value={item.id}>{item.label}</Option>)\r\n                            }\r\n                            </Select>\r\n                            <Button onClick={() => { console.log('graph.save() ==>>', this.graph.save());}}>获取数据</Button>\r\n                        </Space>\r\n                    </Header>\r\n                    <Layout>\r\n                        <Sider\r\n                            collapsible={false}\r\n                            className={'sider'}\r\n                        >\r\n                        </Sider>\r\n                        <Content className={'content'}>\r\n                            <div className='graphContent'>\r\n                                <div id=\"mountNode\" />\r\n                            </div>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n                { showNodeContextMenu && <NodeContextMenu x={x} y={y} /> }\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\edit\\index.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\index.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\contextMenu.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\Modes\\data.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\process\\index.jsx",["127","128"],"import React from 'react';\r\nimport { Col, Row, Space, Button, Modal, Input, Select, Card } from 'antd';\r\n\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport G6 from '@antv/g6';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './style.css';\r\nimport {\r\n  SOURCE_NODE_DATA,\r\n  defaultAnchorPoints,\r\n  showLinkPoints,\r\n  hideLinkPoints,\r\n} from './config';\r\n\r\nconst Option = Select.Option;\r\n\r\nclass Process extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x: 0,\r\n      y: 0,\r\n      operateMode: 'default',\r\n      data: {\r\n        nodes: SOURCE_NODE_DATA,\r\n        edges: {},\r\n      },\r\n      operationModalVisible: false,\r\n      operateInfo: {},\r\n      graphWidth: 1000,\r\n      graphHeight: 800,\r\n      detailNodeModal: false,\r\n      detailEdgeModal: false,\r\n      details: {},\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // 初始化G6的自定义事件\r\n    this.initBehavior();\r\n    // G6的graph实例需要DOM容器渲染完成才能使用，放在componentDidMount中\r\n    this.renderGraph();\r\n  }\r\n\r\n  changeMode = (operateMode = 'default') => {\r\n    this.setState({\r\n      operateMode,\r\n      detailNodeModal: false,\r\n      detailEdgeModal: false,\r\n      details: {},\r\n    });\r\n    this.graph.setMode(operateMode);\r\n  };\r\n\r\n  initBehavior = () => {\r\n    const _this = this;\r\n    G6.registerBehavior('detail-operate', {\r\n      getEvents() {\r\n        return {\r\n          'node:click': 'nodeDetails',\r\n          'edge:click': 'edgeDetails',\r\n          'node:mouseenter': 'highLightNode',\r\n          'node:mouseleave': 'showDefaultNode',\r\n          'edge:mouseenter': 'highLightEdge',\r\n          'edge:mouseleave': 'showDefaultEdge',\r\n        };\r\n      },\r\n\r\n      // 详情模式下单击节点：查看此节点详细信息\r\n      nodeDetails(e) {\r\n        const { item = {} } = e;\r\n        const model = item.getModel();\r\n        console.info('model==>>', model);\r\n        console.info('item==>>', item);\r\n        _this.setState({\r\n          detailEdgeModal: false,\r\n          detailNodeModal: true,\r\n          details: item._cfg,\r\n        });\r\n      },\r\n\r\n      // 详情模式下单击边：查看此边详细信息\r\n      edgeDetails(e) {\r\n        const { item = {} } = e;\r\n        const model = item.getModel();\r\n        _this.setState({\r\n          detailNodeModal: false,\r\n          detailEdgeModal: true,\r\n          details: model,\r\n        });\r\n      },\r\n\r\n      // 详情模式下移入节点：高亮\r\n      highLightNode(e) {\r\n        const { item = {} } = e;\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        if (!isSourceNode) {\r\n          _this.graph.updateItem(item, {\r\n            style: {\r\n              fill: '#d3adf7',\r\n            },\r\n          });\r\n        }\r\n      },\r\n\r\n      // 详情模式下移出节点：默认\r\n      showDefaultNode(e) {\r\n        const { item = {} } = e;\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        if (!isSourceNode) {\r\n          _this.graph.updateItem(item, {\r\n            style: {\r\n              fill: '#C6E5FF',\r\n            },\r\n          });\r\n        }\r\n      },\r\n\r\n      // 边高亮\r\n      highLightEdge(e) {\r\n        const { item = {} } = e;\r\n        this.graph.updateItem(item, {\r\n          style: {\r\n            lineWidth: 3,\r\n            stroke: '#d3adf7',\r\n          },\r\n        });\r\n      },\r\n\r\n      showDefaultEdge(e) {\r\n        const { item = {} } = e;\r\n        this.graph.updateItem(item, {\r\n          style: {\r\n            lineWidth: 2,\r\n            stroke: '#aaa',\r\n          },\r\n        });\r\n      },\r\n    });\r\n\r\n    G6.registerBehavior('edit-operate', {\r\n      // 设定编辑模式下的节点操作\r\n      getEvents() {\r\n        return {\r\n          'node:dragstart': 'moveNode',\r\n          'node:drag': 'dragNode',\r\n          'node:dragend': 'canNodeHere',\r\n          'node:mouseenter': 'mouseEnterNode',\r\n          'node:mouseleave': 'mouseLeaveNode',\r\n          'edge:mouseenter': 'mouseEnterEdge',\r\n          'edge:mouseleave': 'mouseLeaveEdge',\r\n          'node:click': 'clickNodeEdit',\r\n          'node:dblclick': 'editNodeDetails',\r\n          'mousemove': 'connectEdge',\r\n          'edge:click': 'onEdgeClick',\r\n          'edge:dblclick': 'removeEdge',\r\n        };\r\n      },\r\n\r\n      // 编辑模式下开始拖拽节点：判断是否为源节点，如果是源节点则拖出一个新节点，否则仅移动\r\n      moveNode(e) {\r\n        const { item = {} } = e;\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        if (isSourceNode) {\r\n          // 记住源节点的位置\r\n          const { x, y } = item.getModel();\r\n          _this.setState({ x, y });\r\n        }\r\n      },\r\n\r\n      // 编辑模式下拖拽节点\r\n      dragNode() {},\r\n\r\n      // 编辑模式下放开节点：判断是否在画布中，如果不是则扩大画布\r\n      // 如果拖拽的是源节点，则新增一个节点\r\n      canNodeHere(e) {\r\n        const { canvasX, canvasY, item = {} } = e;\r\n        const graphWidth = _this.graph.cfg && _this.graph.cfg.width;\r\n        const graphHeight = _this.graph.cfg && _this.graph.cfg.height;\r\n        if (canvasX + 100 > graphWidth || canvasY + 100 > graphHeight) {\r\n          _this.graph.changeSize(canvasX > graphWidth ? canvasX + 100 : graphWidth, canvasY > graphHeight ? canvasY + 100 : graphHeight);\r\n          // console.log(canvasX, canvasY, graphWidth, graphHeight);\r\n          _this.setState({\r\n            graphHeight: _this.graph.cfg.height,\r\n            graphWidth: _this.graph.cfg.width,\r\n          });\r\n        }\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        if (isSourceNode) {\r\n          const { x, y } = _this.state;\r\n          const model = item.getModel();\r\n          const { id, ...newNode } = model;\r\n          const nodeType = model.customAttributes.nodeType;\r\n          newNode.id = uuidv4();\r\n          newNode.isSource = false;\r\n          _this.graph.updateItem(id, { x, y });\r\n\r\n          // 开始节点 只能有一个\r\n          if (nodeType === 'begin') {\r\n            const allNodes = _this.graph.getNodes()\r\n            const modelList = allNodes.map((node) => {\r\n              return node.getModel();\r\n            });\r\n            const hasBeginNode = modelList.find(model => !model.isSource && model.customAttributes.nodeType === 'begin');\r\n            if (hasBeginNode) return null;\r\n          }\r\n          // 结束节点 只能有一个\r\n          if (nodeType === 'end') {\r\n            const allNodes = _this.graph.getNodes()\r\n            const modelList = allNodes.map((node) => {\r\n              return node.getModel();\r\n            });\r\n            const hasEndnNode = modelList.find(model => !model.isSource && model.customAttributes.nodeType === 'end');\r\n            if (hasEndnNode) return null;\r\n          }\r\n          // x轴方向大于 300 可添加节点\r\n          if (canvasX > 300) {\r\n            _this.graph.addItem('node', newNode);\r\n            _this.graph.setItemState(newNode.id, 'isSource', false);\r\n          }\r\n        }\r\n      },\r\n\r\n      // 编辑模式下鼠标移过节点：判断是否为源节点，如果不是源节点则显示锚点位置和操作指引\r\n      mouseEnterNode(e) {\r\n        const { item = {} } = e;\r\n        _this.graph.setItemState(item, 'hover', true);\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        if (!isSourceNode) {\r\n          _this.showNodeOperation(item);\r\n        }\r\n      },\r\n\r\n      // 编辑模式下鼠标移出节点：隐藏锚点和操作指引\r\n      mouseLeaveNode(e) {\r\n        const { item = {} } = e;\r\n        _this.hideLinkPoints(item);\r\n        _this.graph.setItemState(item, 'hover', false);\r\n      },\r\n\r\n      // 编辑模式下鼠标移过边\r\n      mouseEnterEdge(e) {\r\n        const { item = {} } = e;\r\n        _this.graph.setItemState(item, 'hover', true);\r\n      },\r\n\r\n      // 编辑模式下鼠标移出边\r\n      mouseLeaveEdge(e) {\r\n        const { item = {} } = e;\r\n        _this.graph.setItemState(item, 'hover', false);\r\n      },\r\n\r\n      // 编辑模式下点击节点：不是源节点且是锚点，则可以拉出连线，否则无效\r\n      clickNodeEdit(e) {\r\n        console.log('e==>>', e);\r\n        const { item = {} } = e;\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        const isClickAnchorPoint = _this.isClickAnchorPoint(e);\r\n        if (!isSourceNode && isClickAnchorPoint) {\r\n          // 开启一条连线\r\n          _this.clickAnchorPoint(e);\r\n        }\r\n      },\r\n\r\n      // 编辑模式下双击节点：显示内容编辑框\r\n      editNodeDetails(e) {\r\n        const { item = {} } = e;\r\n        const isSourceNode = _this.isSourceNode(item);\r\n        const model = item.getModel();\r\n\r\n        if (!isSourceNode) {\r\n          _this.setState({\r\n            operateInfo: model,\r\n            operationModalVisible: true,\r\n          });\r\n        }\r\n      },\r\n\r\n      connectEdge(e) {\r\n        // 当前鼠标移过的位置\r\n        const point = { x: e.x, y: e.y };\r\n        if (_this.addingEdge && _this.edge) {\r\n          if (_this.addingEdge && _this.edge) {\r\n            _this.graph.updateItem(_this.edge, {\r\n              target: point\r\n            });\r\n          }\r\n        }\r\n      },\r\n\r\n      onEdgeClick(e) {\r\n        const currentEdge = e.item;\r\n        if (_this.addingEdge && _this.edge === currentEdge) {\r\n          _this.graph.removeItem(_this.edge);\r\n          _this.edge = null;\r\n          _this.addingEdge = false;\r\n        }\r\n      },\r\n\r\n      removeEdge(e) {\r\n        const { item } = e;\r\n        _this.graph.removeItem(item);\r\n      },\r\n\r\n    });\r\n  };\r\n\r\n  // 判断是否为源节点\r\n  isSourceNode = (item) => {\r\n    const model = item.getModel();\r\n    if (model.isSource) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  isClickAnchorPoint = (e) => {\r\n    // 判断是否点击锚点\r\n    const { item = {}, canvasX, canvasY } = e;\r\n    const anchorPointSize = 8;\r\n    const anchorPoints = item.getLinkPoint({ x: canvasX, y: canvasY });\r\n    if (canvasX < anchorPoints.x + anchorPointSize && canvasX > anchorPoints.x - anchorPointSize && canvasY < anchorPoints.y + anchorPointSize && canvasY > anchorPoints.y - anchorPointSize) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 是否两个锚点间已有一条边或者自身\r\n  checkEdge = (targetModel) => {\r\n    // 起始点和目标点id\r\n    const sourceId = this.edge.getModel().source;\r\n    const targetId = targetModel.id;\r\n    if (sourceId === targetId) {\r\n      return false;\r\n    }\r\n    const edges = this.graph.getEdges();\r\n    let flag = true;\r\n    edges.forEach((item) => { // eslint-disable-line\r\n      // 已有的起始点和目标点\r\n      if (item._cfg.targetNode) {\r\n        const { source } = item.getModel();\r\n        const { target } = item.getModel();\r\n        if ((source === sourceId && target === targetId) || (source === targetId && target === sourceId)) {\r\n          // 两个节点之间已有连线\r\n          flag = false;\r\n        }\r\n      }\r\n    });\r\n    return flag;\r\n  };\r\n\r\n  showNodeOperation = (item) => {\r\n    const { _cfg = {} } = item;\r\n    const { id, ...updateNode } = _cfg.model;\r\n    updateNode.id = id;\r\n    // 增加连线锚点\r\n    updateNode.anchorPoints = defaultAnchorPoints;\r\n    updateNode.linkPoints = showLinkPoints;\r\n    // 增加移动光标\r\n    updateNode.style = {\r\n      ...updateNode.style,\r\n      cursor: 'move',\r\n    };\r\n    this.graph.updateItem(id, updateNode);\r\n  };\r\n\r\n  hideLinkPoints = (item) => {\r\n    const { _cfg = {} } = item;\r\n    const { id, linkPoints, ...updateNode } = _cfg.model;\r\n    updateNode.linkPoints = hideLinkPoints;\r\n    this.graph.updateItem(id, updateNode);\r\n  };\r\n\r\n  // 点击了锚点，开启一条连线\r\n  clickAnchorPoint = (e) => {\r\n    const { item = {}, canvasX, canvasY } = e;\r\n    // 获取点击位置最近的锚点作为起始点\r\n    const point = { x: e.x, y: e.y };\r\n    const model = item.getModel();\r\n    if (this.addingEdge && this.edge) {\r\n      // 校验source和target之间是否已有一条边或者自身\r\n      const isOk = this.checkEdge(model);\r\n      if (isOk) {\r\n        const endPointIndex = item.getLinkPoint({ x: canvasX, y: canvasY }).anchorIndex; // 结束点的锚点序号\r\n        this.graph.updateItem(this.edge, {\r\n          target: model.id,\r\n          targetAnchor: endPointIndex,\r\n        });\r\n        // 已经正在连线\r\n        this.addingEdge = false;\r\n      } else {\r\n        // 这两个之间已有一条边或者自身，无法重复连接\r\n        const removeEdgeId = this.edge._cfg.id;\r\n        this.graph.removeItem(removeEdgeId);\r\n        this.addingEdge = false;\r\n      }\r\n    } else {\r\n      // 新增一条连线\r\n      const startPointIndex = item.getLinkPoint({ x: canvasX, y: canvasY }).anchorIndex;\r\n      this.edge = this.graph.addItem('edge', {\r\n        // type: 'polyline', // 折线\r\n        type: 'cubic-vertical', // 贝塞尔曲线（垂直的）\r\n        source: model.id,\r\n        target: point,\r\n        sourceAnchor: startPointIndex,\r\n        lineAppendWidth: 18,\r\n        style: {\r\n          endArrow: true,\r\n          lineWidth: 2,\r\n          stroke: '#aaa',\r\n        },\r\n        // label: '这是label',\r\n        // 控制键\r\n        stateStyles: {\r\n          hover: {\r\n            stroke: '#d3adf7',\r\n            lineWidth: 4,\r\n            shadowColor: 'yellow',\r\n          },\r\n        },\r\n      });\r\n      this.addingEdge = true;\r\n      // this.currentNode = model.id;\r\n    }\r\n  };\r\n\r\n  quitNodeDetails = () => {\r\n    this.setState({\r\n      operateInfo: {},\r\n      operationModalVisible: false,\r\n    });\r\n  };\r\n\r\n  save = () => {\r\n    console.log('查看数据=====>>>>>>');\r\n    console.log('this.graph=======>>>>>>', this.graph);\r\n    console.log('当前数据==========>>>>>>', this.graph.save());\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { operateInfo } = this.state;\r\n    const result = operateInfo;\r\n    const id = operateInfo.id;\r\n    result.label = e.target.value;\r\n    this.graph.updateItem(id, result);\r\n    this.setState({\r\n      operateInfo: result,\r\n    });\r\n  };\r\n\r\n  conditionChange = (e, type) => {\r\n    const { operateInfo } = this.state;\r\n    const result = operateInfo;\r\n    const id = operateInfo.id;\r\n    result[type] = e.target.value;\r\n    this.graph.updateItem(id, result);\r\n    this.setState({\r\n      operateInfo: result,\r\n    });\r\n  };\r\n\r\n  removeNode = () => {\r\n    const { operateInfo } = this.state;\r\n    const id = operateInfo.id;\r\n    this.graph.removeItem(id);\r\n    this.quitNodeDetails();\r\n  };\r\n\r\n  renderGraph = () => {\r\n    // 渲染整个画布\r\n    const { data } = this.state;\r\n    const graph = new G6.Graph({\r\n      container: 'mountNode',\r\n      width: 1500,\r\n      height: 1000,\r\n      modes: {\r\n        // 默认模式\r\n        default: ['drag-node', 'edit-operate'],\r\n        detail: ['detail-operate', 'drag-node'],\r\n      },\r\n    });\r\n\r\n    graph.data(data);\r\n    graph.render();\r\n    this.graph = graph;\r\n  };\r\n\r\n  render() {\r\n    const { operateMode = 'default', operateInfo = {}, operationModalVisible, graphHeight, graphWidth, detailNodeModal, detailEdgeModal, details } = this.state;\r\n    return (\r\n      <div>\r\n        <div className={styles['operation-mode']}>\r\n          <span>操作模式：</span>\r\n          <Select\r\n            value={operateMode}\r\n            style={{ width: 200 }}\r\n            onChange={this.changeMode}\r\n          >\r\n            <Option key=\"default\" value=\"default\">编辑模式</Option>\r\n            <Option key=\"detail\" value=\"detail\">查看模式</Option>\r\n          </Select>\r\n          <Button type=\"primary\" onClick={this.save} style={{ marginLeft: 80 }}>保存</Button>\r\n        </div>\r\n        <div className={styles['operation-area']}>\r\n          <div className={styles['main-div']} style={{ height: graphHeight, width: graphWidth }}>\r\n            <div id=\"mountNode\">\r\n              <div />\r\n            </div>\r\n          </div>\r\n          <Modal title=\"编辑节点\" visible={operationModalVisible} footer={null} onCancel={() => { this.setState({ operationModalVisible: false }); }}>\r\n            <div style={{ display: 'flex' }}>\r\n              <Space align=\"center\" size={10}>\r\n                <div className=\"label\">节点ID:</div>\r\n                <div>{operateInfo.id}</div>\r\n              </Space>\r\n            </div>\r\n            <div style={{ display: 'flex', margin: '10px auto' }}>\r\n              <Space align=\"center\" size={10}>\r\n                <div className=\"label\">节点名称:</div>\r\n                <Input defaultValue={operateInfo.label} onChange={this.handleChange} />\r\n              </Space>\r\n            </div>\r\n            {\r\n                operateInfo.type === 'diamond' &&\r\n                <div>\r\n                  <div style={{ display: 'flex' }}>\r\n                    <Space align=\"center\" size={10}>\r\n                      <div className=\"label\">YES条件:</div>\r\n                      <Input onChange={(e) => { this.conditionChange(e, \"max\"); }} />\r\n                    </Space>\r\n                  </div>\r\n                  <div style={{ display: 'flex', margin: '10px auto' }}>\r\n                    <Space align=\"center\" size={10}>\r\n                      <div className=\"label\">NO条件:</div>\r\n                      <Input onChange={(e) => { this.conditionChange(e, 'min'); }} />\r\n                    </Space>\r\n                  </div>\r\n                </div>\r\n              }\r\n              <Col span={4} offset={20}><Button type=\"primary\" danger onClick={this.removeNode}>删除节点</Button></Col>\r\n          </Modal>\r\n          {\r\n            detailNodeModal &&\r\n            <Card title=\"详细信息\" className={styles['operation-card']}>\r\n              <p>id：{details.id}</p>\r\n              <p>文字内容：{details.model.label}</p>\r\n              <p>坐标：{`(${details.model.x}, ${details.model.y})`}</p>\r\n              <p>是否为源节点：{details.states.length > 0 ? '是' : '否'}</p>\r\n              <p>连线数量：{details.edges.length}</p>\r\n              <div className={styles['button-style']}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      detailNodeModal: false,\r\n                      details: {},\r\n                    });\r\n                  }}\r\n                >关闭</Button>\r\n              </div>\r\n            </Card>\r\n          }\r\n          {\r\n            detailEdgeModal &&\r\n            <Card title=\"详细信息\" className={styles['operation-card']}>\r\n              <p>id：{details.id}</p>\r\n              <p>起始坐标：{`(${details.startPoint.x}, ${details.startPoint.y})`}</p>\r\n              <p>终点坐标：{`(${details.endPoint.x}, ${details.endPoint.y})`}</p>\r\n              <p>label：{details.label}</p>\r\n              <p>线条颜色：{details.style.stroke}</p>\r\n              <div className={styles['button-style']}>\r\n                <Button\r\n                  type=\"primary\"\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      detailEdgeModal: false,\r\n                      details: {},\r\n                    });\r\n                  }}\r\n                >关闭</Button>\r\n              </div>\r\n            </Card>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Process;\r\n","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\index.jsx",["129","130","131","132"],"import React, { Fragment } from 'react';\r\nimport { Col, Row, Space, Button, Modal, Input } from 'antd';\r\nimport G6 from '@antv/g6';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './style.css';\r\nimport {\r\n  graphConfig,\r\n  colors,\r\n  defaultNodeConfig,\r\n  defaultAnchorPoints,\r\n  showLinkPoints,\r\n  hideLinkPoints,\r\n  anchorList,\r\n} from './config';\r\nimport { NodeTooltips, NodeMenu, CanvasMenu } from './component';\r\nimport { registerFn } from './register';\r\n\r\nclass RegisterProcess extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showEdgeTooltip: false,\r\n      showNodeTooltip: false,\r\n      showNodeMenu: false,\r\n      showCanvasMenu: false,\r\n      nodeMenuX: 0,\r\n      nodeMenuY: 0,\r\n      canvasMenuX: 100,\r\n      canvasMenuY: 100,\r\n\r\n      nodeDetailVisible: false,\r\n      currentNodeInfo: {},\r\n      currentEdgeInfo: {},\r\n\r\n      isModalVisible: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // 初始化G6的自定义事件\r\n    registerFn(G6);\r\n    this.registerBehavior();\r\n    // G6的graph实例需要DOM容器渲染完成才能使用，放在componentDidMount中\r\n    this.renderGraph();\r\n  }\r\n\r\n  registerBehavior = () => {\r\n    const _this = this;\r\n    G6.registerBehavior('edit-operate', {\r\n      // 设定编辑模式下的节点操作\r\n      getEvents() {\r\n        return {\r\n          'node:mouseenter': 'mouseEnterNode',\r\n          'node:mouseleave': 'mouseLeaveNode',\r\n          'points-right:click': 'clickNodeEdit',\r\n          'points-top:click': 'clickNodeEdit',\r\n          'points-left:click': 'clickNodeEdit',\r\n          'points-bottom:click': 'clickNodeEdit',\r\n          'node:dblclick': 'editNodeDetails',\r\n          'mousemove': 'connectEdge',\r\n          'edge:click': 'onEdgeClick',\r\n          'edge:dblclick': 'removeItem',\r\n          'points-del:click': 'removeItem',\r\n        };\r\n      },\r\n\r\n      mouseEnterNode(e) {\r\n        const { item } = e;\r\n        const model = item.getModel();\r\n        model.status = 'show';\r\n        _this.graph.setMode(item, model);\r\n      },\r\n\r\n      mouseLeaveNode(e) {\r\n        const { item } = e;\r\n        const model = item.getModel();\r\n        model.status = 'hide';\r\n        _this.graph.setMode(item, model);\r\n      },\r\n\r\n      // 编辑模式下点击节点：不是源节点且是锚点，则可以拉出连线，否则无效\r\n      clickNodeEdit(e) {\r\n        _this.clickAnchorPoint(e);\r\n      },\r\n\r\n      // 编辑模式下双击节点：显示内容编辑框\r\n      editNodeDetails(e) {\r\n        const { item = {} } = e;\r\n        const model = item.getModel();\r\n        _this.setState({\r\n          operateInfo: model,\r\n          operationModalVisible: true,\r\n        });\r\n      },\r\n\r\n      connectEdge(e) {\r\n        // 当前鼠标移过的位置\r\n        const point = { x: e.x, y: e.y };\r\n        if (_this.addingEdge && _this.edge) {\r\n          if (_this.addingEdge && _this.edge) {\r\n            _this.graph.updateItem(_this.edge, {\r\n              target: point\r\n            });\r\n          }\r\n        }\r\n      },\r\n\r\n      onEdgeClick(e) {\r\n        const currentEdge = e.item;\r\n        if (_this.addingEdge && _this.edge === currentEdge) {\r\n          _this.graph.removeItem(_this.edge);\r\n          _this.edge = null;\r\n          _this.addingEdge = false;\r\n        }\r\n      },\r\n\r\n      removeItem(e) {\r\n        const { item } = e;\r\n        _this.graph.removeItem(item);\r\n      },\r\n\r\n    });\r\n  }\r\n  // 点击了锚点，开启一条连线\r\n  clickAnchorPoint = (e) => {\r\n    const { item = {}, canvasX, canvasY } = e;\r\n    // 获取点击位置最近的锚点作为起始点\r\n    const point = { x: e.x, y: e.y };\r\n    const model = item.getModel();\r\n    console.log('e==>>', e, model);\r\n    if (this.addingEdge && this.edge) {\r\n      // 校验source和target之间是否已有一条边或者自身\r\n      const isOk = true;\r\n      if (isOk) {\r\n        const endPointIndex = item.getLinkPoint({ x: canvasX, y: canvasY }).anchorIndex; // 结束点的锚点序号\r\n        this.graph.updateItem(this.edge, {\r\n          target: model.id,\r\n          targetAnchor: endPointIndex,\r\n        });\r\n        // 已经正在连线\r\n        this.addingEdge = false;\r\n      } else {\r\n        // 这两个之间已有一条边或者自身，无法重复连接\r\n        const removeEdgeId = this.edge._cfg.id;\r\n        this.graph.removeItem(removeEdgeId);\r\n        this.addingEdge = false;\r\n      }\r\n    } else {\r\n      // 新增一条连线\r\n      console.log('item.getLinkPoint({ x: canvasX, y: canvasY })=>', item.getLinkPoint({ x: canvasX, y: canvasY }));\r\n      const startPointIndex = item.getLinkPoint({ x: canvasX, y: canvasY }).anchorIndex;\r\n      this.edge = this.graph.addItem('edge', {\r\n        type: 'polyline',\r\n        // type: 'cubic-horizontal',\r\n        source: model.id,\r\n        target: point,\r\n        sourceAnchor: startPointIndex,\r\n        style: {\r\n          endArrow: true,\r\n          lineWidth: 5,\r\n          // stroke: '#CED4D9',\r\n          stroke: '#634bca',\r\n        },\r\n      });\r\n      this.addingEdge = true;\r\n      // this.currentNode = model.id;\r\n    }\r\n  };\r\n\r\n  bindEvents = () => {\r\n    const _this = this;\r\n    const getModelInfo = (e) => {\r\n      const { item } = e;\r\n      const model = item.getModel();\r\n      const { x, y } = model;\r\n      const point = _this.graph.getCanvasByPoint(x, y);\r\n      return { model, point };\r\n    }\r\n    \r\n    // 监听edge上面mouse事件\r\n    _this.graph.on('edge:mouseenter', e => {\r\n      const { item, target } = e\r\n      const type = target.get('type')\r\n      if(type !== 'text') {\r\n        return\r\n      }\r\n    })\r\n\r\n    _this.graph.on('edge:mouseleave', () => {\r\n      \r\n    })\r\n\r\n    // 监听node上面mouse事件\r\n    _this.graph.on('node:mouseenter', e => {\r\n      const { model } = getModelInfo(e);\r\n      console.log(model);\r\n      model.anchorPoints = defaultAnchorPoints;\r\n      model.linkPoints = showLinkPoints;\r\n      this.graph.updateItem(model.id, model);\r\n      _this.setState({\r\n        showNodeTooltip: true,\r\n        currentNodeInfo: model,\r\n      });\r\n    })\r\n  \r\n    // 节点上面触发mouseleave事件后隐藏tooltip和ContextMenu\r\n    _this.graph.on('node:mouseleave', (e) => {\r\n      const { model } = getModelInfo(e);\r\n      model.linkPoints = hideLinkPoints;\r\n      this.graph.updateItem(model.id, model);\r\n      _this.setState({\r\n        showNodeTooltip: false,\r\n        showNodeMenu: false,\r\n      });\r\n    })\r\n\r\n    // 双击节点\r\n    _this.graph.on('node:dblclick', (e) => {\r\n      const { model } = getModelInfo(e);\r\n      console.log(model);\r\n      _this.setState({\r\n        isModalVisible: true,\r\n        currentNodeInfo: model,\r\n      });\r\n    })\r\n    \r\n\r\n    // 监听节点上面右键菜单事件\r\n    _this.graph.on('node:contextmenu', (e) => {\r\n      const { model, point } = getModelInfo(e);\r\n      _this.setState({\r\n        showNodeMenu: true,\r\n        nodeMenuX: point.x,\r\n        nodeMenuY: point.y + 120,\r\n        currentNodeInfo: model,\r\n      });\r\n    })\r\n\r\n    // 监听画布右键菜单事件\r\n    _this.graph.on('canvas:contextmenu', (e) => {\r\n      const { x, y } = e;\r\n      const point = _this.graph.getCanvasByPoint(x, y);\r\n      _this.setState({\r\n        showCanvasMenu: true,\r\n        canvasMenuX: point.x,\r\n        canvasMenuY: point.y + 120,\r\n      });\r\n    })\r\n\r\n    _this.graph.on('canvas:click', () => {\r\n      _this.setState({\r\n        showCanvasMenu: false,\r\n        showNodeMenu: false,\r\n        showNodeTooltip: false,\r\n        showEdgeTooltip: false,\r\n      });\r\n    })\r\n  }\r\n\r\n  renderGraph = () => {\r\n    const { data } = graphConfig;\r\n    const container = document.getElementById('container');\r\n     // 取消默认事件\r\n     container.oncontextmenu = (e) => {\r\n         e.preventDefault()\r\n     }\r\n    const width = container.scrollWidth;\r\n    const height = container.scrollHeight || 800;\r\n    const tooltip = new G6.Tooltip({\r\n      offsetX: 0,\r\n      offsetY: 150,\r\n      // 允许出现 tooltip 的 item 类型\r\n      itemTypes: ['node'],\r\n      // 自定义 tooltip 内容\r\n      getContent: (e) => {\r\n        const { item } = e;\r\n        const div = document.createElement('div');\r\n        div.style.padding = '5px';\r\n        const nodeName = item.getModel().name;\r\n        div.innerHTML = `${nodeName}`;\r\n        return div;\r\n      },\r\n      shouldBegin: (e) => {\r\n        if (e.target.get('name') === 'name-shape') return true;\r\n        return false;\r\n      },\r\n    });\r\n    const { config } = graphConfig;\r\n    this.graph = new G6.Graph({\r\n      container: 'container',\r\n      ...config,\r\n      plugins: [tooltip],\r\n      width,\r\n      height,\r\n    });\r\n    this.graph.data(data);\r\n    this.graph.render();\r\n    this.graph.zoom(config.defaultZoom || 1);\r\n  \r\n    this.bindEvents();\r\n  };\r\n\r\n  addNode = (nodeConfig = defaultNodeConfig) => {\r\n    this.graph.addItem('node', {\r\n      ...nodeConfig,\r\n      id: uuidv4(),\r\n    });\r\n  }\r\n\r\n  delNode = () => {\r\n    const { currentNodeInfo } = this.state;\r\n    const { id } = currentNodeInfo;\r\n    console.log('id==>>>>>', id);\r\n    this.graph.removeItem(id);\r\n    this.setState({ showNodeMenu: false });\r\n  }\r\n\r\n  showNodeDetail = () => {\r\n    this.setState({ nodeDetailVisible: true });\r\n  }\r\n\r\n  save = () => {\r\n    const allDatas = this.graph.save();\r\n    console.log('查看数据===>>>>>>>>>>', allDatas, this.graph);\r\n  }\r\n\r\n  canvasMenuChange = (nodeConfig) => {\r\n    this.addNode(nodeConfig);\r\n    this.setState({ showCanvasMenu: false });\r\n  }\r\n\r\n  nodeNameChange = (e) => {\r\n    const { currentNodeInfo } = this.state;\r\n    const value = e.target.value;\r\n    currentNodeInfo.name = value;\r\n    console.log('currentNodeInfo==》》', currentNodeInfo)\r\n    this.graph.updateItem(currentNodeInfo.id, currentNodeInfo);\r\n    // this.graph.paint();\r\n    // this.graph.refresh();\r\n    // this.graph.render();\r\n    this.setState({ currentNodeInfo });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      showNodeTooltip,\r\n      showNodeMenu,\r\n      showCanvasMenu,\r\n      nodeMenuX,\r\n      nodeMenuY,\r\n      canvasMenuX,\r\n      canvasMenuY,\r\n      nodeDetailVisible,\r\n      currentNodeInfo,\r\n      isModalVisible,\r\n    } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <Row justify='center' style={{ marginBottom: 20 }}>\r\n            <Col>\r\n              <Space size={10}>\r\n                  <Button type=\"primary\" onClick={() => { this.addNode(defaultNodeConfig); }}>添加节点</Button>\r\n                  <Button onClick={this.save}>查看数据</Button>\r\n                  {/* <Button type=\"dashed\">Dashed</Button>\r\n                  <Button type=\"link\">Link</Button> */}\r\n              </Space>\r\n            </Col>\r\n        </Row>\r\n        <div id='container' />\r\n        <Modal title=\"编辑节点\" visible={isModalVisible} footer={null} onCancel={() => { this.setState({ isModalVisible: false }); }}>\r\n          <div style={{ display: 'flex' }}>\r\n            <Space align=\"center\" size={10}>\r\n              <div>节点ID:</div>\r\n              <div>{currentNodeInfo.id}</div>\r\n            </Space>\r\n          </div>\r\n          <div style={{ display: 'flex' }}>\r\n            <Space align=\"center\" size={10}>\r\n              <div>节点名称:</div>\r\n              <Input defaultValue={currentNodeInfo.name} onChange={this.nodeNameChange} />\r\n            </Space>\r\n          </div>\r\n        </Modal>\r\n        { showNodeTooltip && <NodeTooltips nodeInfo={currentNodeInfo} /> }\r\n        { showNodeMenu && <NodeMenu x={nodeMenuX} y={nodeMenuY} delNode={this.delNode} showNodeDetail= {this.showNodeDetail} /> }\r\n        { showCanvasMenu && <CanvasMenu x={canvasMenuX} y={canvasMenuY} onChange={this.canvasMenuChange} /> }\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterProcess;\r\n","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerX\\index.jsx",["133","134"],"import React from 'react';\r\nimport G6 from '@antv/g6';\r\nimport './style.css';\r\nimport {\r\n  prop,\r\n  colors,\r\n  defaultConfig,\r\n} from './config';\r\n\r\nclass RegisterX extends React.Component {\r\n  componentDidMount() {\r\n    // 初始化G6的自定义事件\r\n    this.registerFn();\r\n    // G6的graph实例需要DOM容器渲染完成才能使用，放在componentDidMount中\r\n    this.renderGraph();\r\n  }\r\n\r\n//自定义节点、边\r\n  registerFn = () => {\r\n    G6.registerNode(\r\n      'flow-rect',\r\n      {\r\n        shapeType: 'flow-rect',\r\n        draw(cfg, group) {\r\n          const {\r\n            name = '',\r\n            variableName,\r\n            variableValue,\r\n            variableUp,\r\n            label,\r\n            collapsed,\r\n            currency,\r\n            status,\r\n            rate,\r\n          } = cfg;\r\n          const grey = '#CED4D9';\r\n          // 逻辑不应该在这里判断\r\n          const rectConfig = {\r\n            width: 202,\r\n            height: 60,\r\n            lineWidth: 1,\r\n            fontSize: 12,\r\n            fill: '#fff',\r\n            radius: 4,\r\n            stroke: grey,\r\n            opacity: 1,\r\n          };\r\n  \r\n          const nodeOrigin = {\r\n            x: -rectConfig.width / 2,\r\n            y: -rectConfig.height / 2,\r\n          };\r\n  \r\n          const textConfig = {\r\n            textAlign: 'left',\r\n            textBaseline: 'bottom',\r\n          };\r\n  \r\n          const rect = group.addShape('rect', {\r\n            attrs: {\r\n              x: nodeOrigin.x,\r\n              y: nodeOrigin.y,\r\n              ...rectConfig,\r\n            },\r\n          });\r\n  \r\n          const rectBBox = rect.getBBox();\r\n  \r\n          // label title\r\n          group.addShape('text', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: 12 + nodeOrigin.x,\r\n              y: 20 + nodeOrigin.y,\r\n              text: name.length > 28 ? name.substr(0, 28) + '...' : name,\r\n              fontSize: 12,\r\n              opacity: 0.85,\r\n              fill: '#000',\r\n              cursor: 'pointer',\r\n            },\r\n            name: 'name-shape',\r\n          });\r\n  \r\n          // price\r\n          const price = group.addShape('text', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: 12 + nodeOrigin.x,\r\n              y: rectBBox.maxY - 12,\r\n              text: label,\r\n              fontSize: 16,\r\n              fill: '#000',\r\n              opacity: 0.85,\r\n            },\r\n          });\r\n  \r\n          // label currency\r\n          group.addShape('text', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: price.getBBox().maxX + 5,\r\n              y: rectBBox.maxY - 12,\r\n              text: currency,\r\n              fontSize: 12,\r\n              fill: '#000',\r\n              opacity: 0.75,\r\n            },\r\n          });\r\n  \r\n          // percentage\r\n          const percentText = group.addShape('text', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: rectBBox.maxX - 8,\r\n              y: rectBBox.maxY - 12,\r\n              text: `${((variableValue || 0) * 100).toFixed(2)}%`,\r\n              fontSize: 12,\r\n              textAlign: 'right',\r\n              fill: colors[status],\r\n            },\r\n          });\r\n  \r\n          // percentage triangle\r\n          const symbol = variableUp ? 'triangle' : 'triangle-down';\r\n          const triangle = group.addShape('marker', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: percentText.getBBox().minX - 10,\r\n              y: rectBBox.maxY - 12 - 6,\r\n              symbol,\r\n              r: 6,\r\n              fill: colors[status],\r\n            },\r\n          });\r\n  \r\n          // variable name\r\n          group.addShape('text', {\r\n            attrs: {\r\n              ...textConfig,\r\n              x: triangle.getBBox().minX - 4,\r\n              y: rectBBox.maxY - 12,\r\n              text: variableName,\r\n              fontSize: 12,\r\n              textAlign: 'right',\r\n              fill: '#000',\r\n              opacity: 0.45,\r\n            },\r\n          });\r\n  \r\n          // bottom line background\r\n          const bottomBackRect = group.addShape('rect', {\r\n            attrs: {\r\n              x: nodeOrigin.x,\r\n              y: rectBBox.maxY - 4,\r\n              width: rectConfig.width,\r\n              height: 4,\r\n              radius: [0, 0, rectConfig.radius, rectConfig.radius],\r\n              fill: '#E0DFE3',\r\n            },\r\n          });\r\n  \r\n          // bottom percent\r\n          const bottomRect = group.addShape('rect', {\r\n            attrs: {\r\n              x: nodeOrigin.x,\r\n              y: rectBBox.maxY - 4,\r\n              width: rate * rectBBox.width,\r\n              height: 4,\r\n              radius: [0, 0, 0, rectConfig.radius],\r\n              fill: colors[status],\r\n            },\r\n          });\r\n  \r\n          // collapse rect\r\n          if (cfg.children && cfg.children.length) {\r\n            group.addShape('rect', {\r\n              attrs: {\r\n                x: rectConfig.width / 2 - 8,\r\n                y: -8,\r\n                width: 16,\r\n                height: 16,\r\n                stroke: 'rgba(0, 0, 0, 0.25)',\r\n                cursor: 'pointer',\r\n                fill: '#fff',\r\n              },\r\n              name: 'collapse-back',\r\n              modelId: cfg.id,\r\n            });\r\n  \r\n            // collpase text\r\n            group.addShape('text', {\r\n              attrs: {\r\n                x: rectConfig.width / 2,\r\n                y: -1,\r\n                textAlign: 'center',\r\n                textBaseline: 'middle',\r\n                text: collapsed ? '+' : '-',\r\n                fontSize: 16,\r\n                cursor: 'pointer',\r\n                fill: 'rgba(0, 0, 0, 0.25)',\r\n              },\r\n              name: 'collapse-text',\r\n              modelId: cfg.id,\r\n            });\r\n          }\r\n  \r\n          this.drawLinkPoints(cfg, group);\r\n          return rect;\r\n        },\r\n        update(cfg, item) {\r\n          const group = item.getContainer();\r\n          this.updateLinkPoints(cfg, group);\r\n        },\r\n        setState(name, value, item) {\r\n          if (name === 'collapse') {\r\n            const group = item.getContainer();\r\n            const collapseText = group.find((e) => e.get('name') === 'collapse-text');\r\n            if (collapseText) {\r\n              if (!value) {\r\n                collapseText.attr({\r\n                  text: '-',\r\n                });\r\n              } else {\r\n                collapseText.attr({\r\n                  text: '+',\r\n                });\r\n              }\r\n            }\r\n          }\r\n        },\r\n        getAnchorPoints() {\r\n          return [\r\n            [0, 0.5],\r\n            [1, 0.5],\r\n          ];\r\n        },\r\n      },\r\n      'rect',\r\n    );\r\n  \r\n    G6.registerEdge(\r\n      'flow-cubic',\r\n      {\r\n        getControlPoints(cfg) {\r\n          let controlPoints = cfg.controlPoints; // 指定controlPoints\r\n          if (!controlPoints || !controlPoints.length) {\r\n            const { startPoint, endPoint, sourceNode, targetNode } = cfg;\r\n            const { x: startX, y: startY, coefficientX, coefficientY } = sourceNode\r\n              ? sourceNode.getModel()\r\n              : startPoint;\r\n            const { x: endX, y: endY } = targetNode ? targetNode.getModel() : endPoint;\r\n            let curveStart = (endX - startX) * coefficientX;\r\n            let curveEnd = (endY - startY) * coefficientY;\r\n            curveStart = curveStart > 40 ? 40 : curveStart;\r\n            curveEnd = curveEnd < -30 ? curveEnd : -30;\r\n            controlPoints = [\r\n              { x: startPoint.x + curveStart, y: startPoint.y },\r\n              { x: endPoint.x + curveEnd, y: endPoint.y },\r\n            ];\r\n          }\r\n          return controlPoints;\r\n        },\r\n        getPath(points) {\r\n          const path = [];\r\n          path.push(['M', points[0].x, points[0].y]);\r\n          path.push([\r\n            'C',\r\n            points[1].x,\r\n            points[1].y,\r\n            points[2].x,\r\n            points[2].y,\r\n            points[3].x,\r\n            points[3].y,\r\n          ]);\r\n          return path;\r\n        },\r\n      },\r\n      'single-line',\r\n    );\r\n  };\r\n\r\n  renderGraph = () => {\r\n    const { data } = prop;\r\n    if (!data) {\r\n      return;\r\n    }\r\n    const container = document.getElementById('container');\r\n    const width = container.scrollWidth;\r\n    const height = container.scrollHeight || 800;\r\n    const { onInit, config } = prop;\r\n    const tooltip = new G6.Tooltip({\r\n      offsetX: 20,\r\n      offsetY: 30,\r\n      // 允许出现 tooltip 的 item 类型\r\n      itemTypes: ['node'],\r\n      // 自定义 tooltip 内容\r\n      getContent: (e) => {\r\n        const outDiv = document.createElement('div');\r\n        //outDiv.style.padding = '0px 0px 20px 0px';\r\n        const nodeName = e.item.getModel().name;\r\n        let formatedNodeName = '';\r\n        for (let i = 0; i < nodeName.length; i++) {\r\n          formatedNodeName = `${formatedNodeName}${nodeName[i]}`;\r\n          if (i !== 0 && i % 20 === 0) formatedNodeName = `${formatedNodeName}<br/>`;\r\n        }\r\n        outDiv.innerHTML = `${formatedNodeName}`;\r\n        return outDiv;\r\n      },\r\n      shouldBegin: (e) => {\r\n        if (e.target.get('name') === 'name-shape') return true;\r\n        return false;\r\n      },\r\n    });\r\n    this.graph = new G6.TreeGraph({\r\n      container: 'container',\r\n      ...defaultConfig,\r\n      ...config,\r\n      plugins: [tooltip],\r\n      width,\r\n      height,\r\n    });\r\n    if (typeof onInit === 'function') {\r\n      onInit(this.graph);\r\n    }\r\n    this.graph.data(data);\r\n    this.graph.render();\r\n    this.graph.zoom(config.defaultZoom || 1);\r\n  \r\n    const handleCollapse = (e) => {\r\n      const target = e.target;\r\n      const id = target.get('modelId');\r\n      const item = this.graph.findById(id);\r\n      const nodeModel = item.getModel();\r\n      nodeModel.collapsed = !nodeModel.collapsed;\r\n      this.graph.layout();\r\n      this.graph.setItemState(item, 'collapse', nodeModel.collapsed);\r\n    };\r\n    this.graph.on('collapse-text:click', (e) => {\r\n      handleCollapse(e);\r\n    });\r\n    this.graph.on('collapse-back:click', (e) => {\r\n      handleCollapse(e);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id='container' />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterX;\r\n","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\data.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerX\\config.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\register.js",["135"],"import {\r\n  colors,\r\n} from './config';\r\n\r\nexport const registerFn = (G6) => {\r\n  G6.registerNode(\r\n    'flow-rect',\r\n    {\r\n      shapeType: 'flow-rect',\r\n      options: {\r\n        style: {},\r\n        stateStyles: {\r\n          hover: {\r\n            fill: '#000'\r\n          }\r\n        }\r\n      },\r\n      draw(cfg, group) {\r\n        const {\r\n          name = '',\r\n          label,\r\n          nodetype,\r\n          status,\r\n          style = {},\r\n          src,\r\n        } = cfg;\r\n        const grey = '#CED4D9';\r\n        // 逻辑不应该在这里判断\r\n        const rectConfig = {\r\n          width: 200,\r\n          height: 60,\r\n          lineWidth: 1,\r\n          fontSize: 14,\r\n          radius: 4,\r\n          stroke: grey,\r\n          opacity: 1,\r\n          fill: colors[nodetype] || '#fff',\r\n          ...style,\r\n        };\r\n\r\n        const nodeOrigin = {\r\n          x: -rectConfig.width / 2,\r\n          y: -rectConfig.height / 2,\r\n        };\r\n\r\n        const textConfig = {\r\n          textAlign: 'left',\r\n          textBaseline: 'bottom',\r\n        };\r\n\r\n        const rect = group.addShape('rect', {\r\n          attrs: {\r\n            x: nodeOrigin.x,\r\n            y: nodeOrigin.y,\r\n            ...rectConfig,\r\n          },\r\n        });\r\n\r\n        const rectBBox = rect.getBBox();\r\n\r\n        // label title\r\n        group.addShape('text', {\r\n          attrs: {\r\n            ...textConfig,\r\n            x: 12 + nodeOrigin.x,\r\n            y: 20 + nodeOrigin.y,\r\n            text: name.length > 28 ? name.substr(0, 28) + '...' : name,\r\n            fontSize: 16,\r\n            opacity: 0.85,\r\n            fill: '#000',\r\n            cursor: 'pointer',\r\n          },\r\n          name: 'name-shape',\r\n        });\r\n\r\n        // label\r\n        const state = group.addShape('text', {\r\n          attrs: {\r\n            ...textConfig,\r\n            x: 12 + nodeOrigin.x,\r\n            y: rectBBox.maxY - 12,\r\n            text: label,\r\n            fontSize: 12,\r\n            fill: '#000',\r\n            opacity: 0.85,\r\n          },\r\n        });\r\n\r\n        group.addShape('image', {\r\n          attrs: {\r\n            x: nodeOrigin.x + rectConfig.width - 25,\r\n            y: nodeOrigin.y + rectConfig.height / 2,\r\n            text: '111',\r\n            width: 20,\r\n            height: 20,\r\n            img: src,\r\n          },\r\n          name: 'image-shape'\r\n        });\r\n\r\n        // // bottom line background\r\n        // group.addShape('rect', {\r\n        //   attrs: {\r\n        //     x: nodeOrigin.x,\r\n        //     y: rectBBox.maxY - 4,\r\n        //     width: rectConfig.width,\r\n        //     height: 4,\r\n        //     radius: [0, 0, rectConfig.radius, rectConfig.radius],\r\n        //     fill: '#E0DFE3',\r\n        //   },\r\n        // });\r\n        // https://oss.tool.lu/cache/202103/18/143435a72frwbjcb7f7jb2.jpg.icon.ico\r\n\r\n         if (status && status === 'show') {\r\n           // right\r\n            group.addShape('rect', {\r\n              attrs: {\r\n                x: nodeOrigin.x + rectConfig.width - 9,\r\n                y: nodeOrigin.y + rectConfig.height / 2 - 9,\r\n                cursor: 'pointer',\r\n                text: '',\r\n                fill: '#fff',\r\n                stroke: 'green',\r\n                lineWidth: 2,\r\n                radius: 10,\r\n                width: 18,\r\n                height: 18,\r\n              },\r\n              name: 'points-right',\r\n              modelId: 'right',\r\n            });\r\n\r\n            // top\r\n            group.addShape('rect', {\r\n              attrs: {\r\n                x: nodeOrigin.x + rectConfig.width / 2 - 9,\r\n                y: nodeOrigin.y - 9,\r\n                cursor: 'pointer',\r\n                text: '',\r\n                fill: '#fff',\r\n                stroke: 'green',\r\n                radius: 10,\r\n                width: 18,\r\n                height: 18,\r\n              },\r\n              name: 'points-top',\r\n              modelId: 'top',\r\n            });\r\n\r\n            // bottom\r\n            group.addShape('rect', {\r\n              attrs: {\r\n                x: nodeOrigin.x + rectConfig.width / 2 - 9,\r\n                y: nodeOrigin.y + rectConfig.height - 9,\r\n                cursor: 'pointer',\r\n                text: '',\r\n                fill: '#fff',\r\n                stroke: 'green',\r\n                radius: 10,\r\n                width: 18,\r\n                height: 18,\r\n              },\r\n              name: 'points-bottom',\r\n              modelId: 'bottom',\r\n            });\r\n\r\n            // left\r\n            group.addShape('rect', {\r\n              attrs: {\r\n                x: nodeOrigin.x - 9,\r\n                y: nodeOrigin.y + rectConfig.height / 2 - 9,\r\n                cursor: 'pointer',\r\n                text: '',\r\n                fill: '#fff',\r\n                stroke: 'green',\r\n                radius: 10,\r\n                width: 18,\r\n                height: 18,\r\n              },\r\n              name: 'points-left',\r\n              modelId: 'left',\r\n            });\r\n\r\n            // X\r\n            group.addShape('text', {\r\n              attrs: {\r\n                x: nodeOrigin.x + rectConfig.width - 9,\r\n                y: nodeOrigin.y + 12,\r\n                cursor: 'pointer',\r\n                text: \"X\",\r\n                fontSize: 24,\r\n                fill: 'red',\r\n                stroke: 'red',\r\n                width: 18,\r\n                height: 18,\r\n              },\r\n              name: 'points-del',\r\n              modelId: 'del',\r\n            });\r\n         }\r\n\r\n        // this.drawLinkPoints(cfg, group);\r\n        return rect;\r\n      },\r\n      // update(cfg, item) {\r\n      //   const group = item.getContainer();\r\n      //   this.updateLinkPoints(cfg, group);\r\n      // },\r\n      // group.addShape('image', {\r\n      //   attrs: {\r\n      //     x: nodeOrigin.x + rectConfig.width - 9,\r\n      //     y: nodeOrigin.y + rectConfig.height / 2 - 9,\r\n      //     width: 18,\r\n      //     height: 18,\r\n      //     img: 'https://oss.tool.lu/cache/202103/18/143435a72frwbjcb7f7jb2.jpg.icon.ico',\r\n      //   },\r\n      //   name: 'image',\r\n      // });\r\n      // afterDraw(cfg, group) {\r\n      //   const size = cfg.size;\r\n      //   const width = size[0] - 14;\r\n      //   const height = size[1] - 14;\r\n      //   // 添加图片\r\n        \r\n      // },\r\n      update: undefined,\r\n      setState(name, value, item) {\r\n        if (name === 'collapse') {\r\n          const group = item.getContainer();\r\n          const collapseText = group.find((e) => e.get('name') === 'collapse-text');\r\n          if (collapseText) {\r\n            if (!value) {\r\n              collapseText.attr({\r\n                text: '-',\r\n              });\r\n            } else {\r\n              collapseText.attr({\r\n                text: '+',\r\n              });\r\n            }\r\n          }\r\n        }\r\n      },\r\n      getAnchorPoints() {\r\n        return [\r\n          [0.5, 0],\r\n          [0, 0.5],\r\n          [1, 0.5],\r\n          [0.5, 1],\r\n        ];\r\n      },\r\n    },\r\n    'rect',\r\n  );\r\n\r\n  G6.registerEdge(\r\n    'flow-cubic',\r\n    {\r\n      getControlPoints(cfg) {\r\n        let controlPoints = cfg.controlPoints; // 指定controlPoints\r\n        if (!controlPoints || !controlPoints.length) {\r\n          const { startPoint, endPoint, sourceNode, targetNode } = cfg;\r\n          const { x: startX, y: startY, coefficientX, coefficientY } = sourceNode\r\n            ? sourceNode.getModel()\r\n            : startPoint;\r\n          const { x: endX, y: endY } = targetNode ? targetNode.getModel() : endPoint;\r\n          let curveStart = (endX - startX) * coefficientX;\r\n          let curveEnd = (endY - startY) * coefficientY;\r\n          curveStart = curveStart > 40 ? 40 : curveStart;\r\n          curveEnd = curveEnd < -30 ? curveEnd : -30;\r\n          controlPoints = [\r\n            { x: startPoint.x + curveStart, y: startPoint.y },\r\n            { x: endPoint.x + curveEnd, y: endPoint.y },\r\n          ];\r\n        }\r\n        return controlPoints;\r\n      },\r\n      getPath(points) {\r\n        const path = [];\r\n        path.push(['M', points[0].x, points[0].y]);\r\n        path.push([\r\n          'C',\r\n          points[1].x,\r\n          points[1].y,\r\n          points[2].x,\r\n          points[2].y,\r\n          points[3].x,\r\n          points[3].y,\r\n        ]);\r\n        return path;\r\n      },\r\n    },\r\n    'single-line',\r\n  );\r\n\r\n};","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\config.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\dome002\\component\\dragComponent.jsx",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\index.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\canvasMenu.js",["136"],"import React from 'react'\r\nimport { Menu, Icon } from 'antd'\r\nimport { ApartmentOutlined } from '@ant-design/icons';\r\nimport 'antd/es/menu/style/css'\r\nimport { NodeModelMap } from '../config';\r\nconst { SubMenu } = Menu\r\n\r\nconst NodeContextMenu = ({ x = 100, y = 100, onChange }) => {\r\n  return (\r\n    <Menu style={{ width: 180, position: 'absolute', left: x, top: y, border: '1px #ccc solid', borderRadius: 5, boxShadow: '1px 1px 1px 1px #aaa' }} mode=\"vertical\">\r\n      <SubMenu\r\n        key=\"sub1\"\r\n        title={\r\n          <span>\r\n            <ApartmentOutlined />\r\n            <span>添加节点</span>\r\n          </span>\r\n        }\r\n      >\r\n        <Menu.Item key=\"1\" icon={<ApartmentOutlined />} onClick={() => onChange(NodeModelMap.begin) }>添加开始节点</Menu.Item>\r\n        <Menu.Item key=\"2\" icon={<ApartmentOutlined />} onClick={() => onChange(NodeModelMap.process) }>添加决策节点</Menu.Item>\r\n        <Menu.Item key=\"3\" icon={<ApartmentOutlined />} onClick={() => onChange(NodeModelMap.condition) }>添加条件节点</Menu.Item>\r\n        <Menu.Item key=\"4\" icon={<ApartmentOutlined />} onClick={() => onChange(NodeModelMap.end) }>添加结束节点</Menu.Item>\r\n      </SubMenu>\r\n      {/* <Menu.Item key=\"1\" icon={<ApartmentOutlined />} onClick={() => onChange() }>添加开始节点</Menu.Item>\r\n      <Menu.Item key=\"2\" icon={<ApartmentOutlined />} onClick={() => onChange() }>添加决策节点</Menu.Item>\r\n      <Menu.Item key=\"3\" icon={<ApartmentOutlined />} onClick={() => onChange() }>添加条件节点</Menu.Item>\r\n      <Menu.Item key=\"4\" icon={<ApartmentOutlined />} onClick={() => onChange() }>添加结束节点</Menu.Item> */}\r\n      <Menu.Item key=\"12\" icon={<ApartmentOutlined />}>其他。。。</Menu.Item>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default NodeContextMenu","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\nodeMenu.js",["137","138"],"import React from 'react'\r\nimport { Menu, Icon } from 'antd'\r\nimport { InfoCircleOutlined, DeleteOutlined } from '@ant-design/icons';\r\nimport 'antd/es/menu/style/css'\r\n\r\nconst NodeContextMenu = ({ x = 100, y = 100, delNode, showNodeDetail }) => {\r\n  return <Menu className=\"process-menu\" style={{ width: 180, position: 'absolute', left: x, top: y, border: '1px #ccc solid', borderRadius: 5, boxShadow: '1px 1px 1px 1px #aaa' }} mode=\"vertical\">\r\n    <Menu.Item key=\"1\" icon={<DeleteOutlined />} onClick={delNode}>删除节点</Menu.Item>\r\n    {/* <Menu.Item key=\"2\" icon={<InfoCircleOutlined />} onClick={showNodeDetail}>查看详情</Menu.Item> */}\r\n  </Menu>\r\n}\r\n\r\nexport default NodeContextMenu","C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\edgTooltip.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\registerProcess\\component\\nodeTooltip.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\process\\config.js",[],"C:\\Users\\Admin\\Desktop\\process-new\\src\\components\\edit\\data.js",[],{"ruleId":"139","severity":1,"message":"140","line":2,"column":35,"nodeType":"141","messageId":"142","endLine":2,"endColumn":41},{"ruleId":"139","severity":1,"message":"143","line":2,"column":43,"nodeType":"141","messageId":"142","endLine":2,"endColumn":47},{"ruleId":"139","severity":1,"message":"144","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"145","line":11,"column":17,"nodeType":"141","messageId":"142","endLine":11,"endColumn":23},{"ruleId":"139","severity":1,"message":"146","line":2,"column":15,"nodeType":"141","messageId":"142","endLine":2,"endColumn":18},{"ruleId":"139","severity":1,"message":"147","line":4,"column":10,"nodeType":"141","messageId":"142","endLine":4,"endColumn":23},{"ruleId":"139","severity":1,"message":"148","line":8,"column":3,"nodeType":"141","messageId":"142","endLine":8,"endColumn":9},{"ruleId":"139","severity":1,"message":"149","line":13,"column":3,"nodeType":"141","messageId":"142","endLine":13,"endColumn":13},{"ruleId":"139","severity":1,"message":"150","line":181,"column":15,"nodeType":"141","messageId":"142","endLine":181,"endColumn":19},{"ruleId":"139","severity":1,"message":"151","line":352,"column":7,"nodeType":"141","messageId":"142","endLine":352,"endColumn":24},{"ruleId":"139","severity":1,"message":"152","line":151,"column":17,"nodeType":"141","messageId":"142","endLine":151,"endColumn":31},{"ruleId":"139","severity":1,"message":"153","line":163,"column":17,"nodeType":"141","messageId":"142","endLine":163,"endColumn":27},{"ruleId":"139","severity":1,"message":"154","line":77,"column":15,"nodeType":"141","messageId":"142","endLine":77,"endColumn":20},{"ruleId":"139","severity":1,"message":"155","line":2,"column":16,"nodeType":"141","messageId":"142","endLine":2,"endColumn":20},{"ruleId":"139","severity":1,"message":"155","line":2,"column":16,"nodeType":"141","messageId":"142","endLine":2,"endColumn":20},{"ruleId":"139","severity":1,"message":"156","line":3,"column":10,"nodeType":"141","messageId":"142","endLine":3,"endColumn":28},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'react' is defined but never used.","'Footer' is assigned a value but never used.","'Row' is defined but never used.","'CloseOutlined' is defined but never used.","'colors' is defined but never used.","'anchorList' is defined but never used.","'item' is assigned a value but never used.","'nodeDetailVisible' is assigned a value but never used.","'bottomBackRect' is assigned a value but never used.","'bottomRect' is assigned a value but never used.","'state' is assigned a value but never used.","'Icon' is defined but never used.","'InfoCircleOutlined' is defined but never used."]